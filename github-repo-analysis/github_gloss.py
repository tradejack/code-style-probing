# -*- coding: utf-8 -*-
"""github_gloss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AbskOFQkoWuXOFAf1nIS6vEdalpZ84Mv
"""

test_code = "def function_name(par_1, parTwo, camelCase)\n\t\"\"\"\n\tdocstring time\n\t\"\"\"\n\tvar_1 = 42 # cool and awesome comment\n\tprint('hello world!') #comment too\n\treturn "
print(test_code)

# Use AST package for better parsing! 
import re 
def count_casing(input_code):
  case_dict = {"camelCase":0,
               "snake_case":0}
  camel = r"[a-z]+([A-Z][a-z0-9]+)+"
  snake = r"[a-z]+(_[a-z0-9]+)+"
  input_code = input_code.replace("("," ")
  input_code = input_code.replace(")"," ")
  for token in input_code.split():
    if re.match(camel, token):
      case_dict["camelCase"] += 1
    elif re.match(snake, token):
      case_dict["snake_case"] += 1
  return case_dict

def count_docstrings(input_code):
  docstr = r"\"\"\"[\s\S]*?\"\"\""
  search = re.findall(docstr, input_code)
  return search

def count_comments(input_code):
  comment = r"#.*"
  search = re.findall(comment, input_code)
  return search

# test the regex searching methods:
print(f"Casing  count: {count_casing(test_code)}")
print(f"Docstr  count: {count_docstrings(test_code)}")
print(f"Comment count: {count_comments(test_code)}")

import os
from collections import Counter

def repo_probe(directory):
  """
  function that takes a repo folder, walks through the FS, and calculates
  the following stats:
    * # of instances of casing
    * # of docstrings TODO - Count docstrings per method / how many methods have docstrings
    * # of comments
    * Average docstring length (words)
    * Average comment length (words)
    * Average comment density
  """

  comment_count = 0
  comment_length = 0
  docstring_count = 0
  docstring_length = 0
  casing_count = Counter()

  total = 0
  for root, dirs, files in os.walk(directory):
      for file_name in files:
          if file_name.endswith(".py"):
            file_path = os.path.join(root, file_name)
            with(open(file_path, 'r', encoding='latin-1')) as fp:
              code = fp.read()
              fp.close()

              # calculate stats
              comments = count_comments(code)
              docstrings = count_docstrings(code)

              comment_count += len(comments)
              if comment_count:
                comment_length += sum([len(com)for com in comments])/comment_count
              
              docstring_count += len(docstrings)
              if docstring_count:
                docstring_length += sum([len(doc)for doc in docstrings])/docstring_count

              casing_count += Counter(count_casing(code))
                
              total += 1
              
  print(f"Repo name:{directory}")
  print(f"Number of python files in repo:\t {total}")
  print(f"Average number of comments:\t {comment_count/total}")
  print(f"Average length of comments:\t {comment_length/total}")
  print(f"Average number of docstrings:\t {docstring_count/total}")
  print(f"Average length of docstrings:\t {docstring_length/total}")
  print(f"Casing counts: {casing_count}")

  return

for repo in ["./npy_datetime", "./shopi", "./Gnome-menu-applet", "./Calculator-Course-2019", "./vivo-remove-people" ]:
  repo_probe(repo)
  print()

os = ['awesome-python', 'django', 'flask', 'keras', 'nltk', 'pandas', 'pytorch', 'scikit-learn', 'scipy', 'youtube-dl']
os_camel = [0, 1172, 0, 910, 561, 612, 4006, 1420, 809, 567]
os_snake = [31, 80261, 2085, 95749, 18278, 93351, 261656, 116486, 85921, 30887]
com_count = [14, 7.013, 10.619, 33.014, 28.193, 22.367, 19.477, 28.182, 25.064, 3.764]
com_len = [49.785, 48.796, 47.512,49.350, 42.407, 37.668, 49.21, 46.53, 44.677, 39.243]
doc_count = [1.0, 2.488, 4.098, 5.4855, 10.425, 3.688, 2.977, 4.40, 4.88, 0.129, ]
doc_len = [618.0, 160.12, 442.15, 538.112, 381.69, 490.62, 458.68, 876.75, 1023.899, 402.989]

# TODO: find more smaller repositories
small = ["npy_datetime", "shopi", "Gnome-menu-applet", "Calculator-Course-2019", "vivo-remove-people" ]
small_camel = [1625, 0, 17, 77, 0]
small_snake = [7, 18, 33, 152, 29]
small_com_count = [31.454, 1.307, 31.0, 8.42, 7.0]
small_com_len = [5.27, 7.50, 30.58, 8.42, 31]
small_doc_count = [0.81, 0.15, 2, 0, 2]
small_doc_len = [64.29,26.15, 429.5,  0, 88.5, ]

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small,com_count+small_com_count, color=['r']*len(os)+['b']*len(small))
plt.title("Average Comments per Document")
plt.ylabel('# comments')
plt.xlabel('Repository')
plt.show()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small,com_len+small_com_len, color=['r']*len(os)+['b']*len(small))
plt.title("Average Length of Comments per Document")
plt.ylabel('# char')
plt.xlabel('Repository')
plt.show()

# TODO: prune out no-docstring documents
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small, doc_count+small_doc_count, color=['r']*len(os)+['b']*len(small))
plt.title("Average Docstrings per Document")
plt.ylabel('# Docstrings')
plt.xlabel('Repository')
plt.show()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small,doc_len+small_doc_len, color=['r']*len(os)+['b']*len(small))
plt.title("Average Length of Docstring per Document")
plt.ylabel('# char')
plt.xlabel('Repository')
plt.show()

# Use ASTs to differentiate between variable/class/method names
# how to handle imported method names????
# Watson Graphical/Dataflow possible sol'n
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small, os_snake+small_snake, color=['r']*len(os)+['b']*len(small))
plt.title("Average snake casing per Document")
plt.ylabel('Raw Count')
plt.xlabel('Repository')
plt.show()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small, os_camel+small_camel, color=['r']*len(os)+['b']*len(small))
plt.title("Average camel casing per Document")
plt.ylabel('raw counts')
plt.xlabel('Repository')
plt.show()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(os+small, [os_camel[i]/os_snake[i] for i in range(len(os))] + [small_camel[i]/small_snake[i] for i in range(len(small))], color=['r']*len(os)+['b']*len(small))
plt.title("Average Ratio of camel:snake casing per Document")
plt.ylabel('camel:snake')
plt.xlabel('Repository')
plt.show()

def graph_stats(red_x_data, red_y_data, blue_x_data, blue_y_data, title, x_axis, y_axis):
  """
  Plots 
  """
  fig = plt.figure()
  ax = fig.add_axes([0,0,1,1])
  ax.bar(red_x_data+blue_x_data, red_y_data + blue_y_data, color=['r']*len(red_x_data)+['b']*len(blue_x_data))
  plt.title(title)
  plt.ylabel(y_axis)
  plt.xlabel(x_axis)
  plt.xticks(rotation=90)
  plt.show()

graph_stats(os, os_camel, small, small_camel, "Test", "x", "y")

